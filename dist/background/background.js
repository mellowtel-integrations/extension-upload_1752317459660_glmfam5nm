(()=>{let e=[],o=new Set;chrome.storage.local.get("downloadedInvoices",e=>{e.downloadedInvoices&&(o=new Set(e.downloadedInvoices))}),chrome.runtime.onMessage.addListener((t,n,r)=>("storeOrders"===t.action?(e=t.orders,console.log("Stored detected orders:",e),r({status:"Orders stored successfully"})):"downloadInvoices"===t.action&&function(){const t=e.filter(e=>!o.has(e.id));console.log(`Found ${t.length} new invoices to download.`),chrome.runtime.sendMessage({action:"updateStatus",text:`Downloading ${t.length} invoices...`,inProgress:!0}),0!==t.length?t.forEach((t,n)=>{setTimeout(()=>{!async function(t){try{const n=await fetch(t.invoiceUrl),r=await n.blob();await async function(e,o){const{webhookUrl:t,smtpConfig:n}=await new Promise(e=>{chrome.storage.sync.get(["webhookUrl","smtpConfig"],o=>{e(o)})});n&&n.host&&n.recipient?await async function(e,o,t){console.log(`Simulating sending email for order ${o.id} via SMTP.`);const n=new FileReader;n.readAsDataURL(e),n.onloadend=function(){n.result,console.log("Email details:"),console.log(`  To: ${t.recipient}`),console.log(`  Subject: Invoice for Amazon Order ${o.id}`),console.log(`  Body: Please find attached the invoice for your recent Amazon order ${o.id}.`),console.log(`  Attachment: ${o.id}.pdf (base64 encoded)`)}}(e,o,n):t&&await async function(e,o,t){const n=new FormData;n.append("file",e,`${o.id}.pdf`),n.append("orderId",o.id),n.append("orderDate",o.date);try{const e=await fetch(t,{method:"POST",body:n});e.ok?console.log(`Successfully sent invoice for order ${o.id} to webhook.`):console.error(`Webhook failed for order ${o.id} with status:`,e.status)}catch(e){console.error(`Error sending to webhook for order ${o.id}:`,e)}}(e,o,t)}(r,t),function(t,n){const r=`${new Date(n.date).getFullYear()}/${String(new Date(n.date).getMonth()+1).padStart(2,"0")} - Amazon - ${n.id}.pdf`,a=URL.createObjectURL(t);chrome.downloads.download({url:a,filename:r,saveAs:!1},t=>{chrome.runtime.lastError?console.error("Download failed:",chrome.runtime.lastError):(console.log(`Successfully started download for order ${n.id}`),o.add(n.id),chrome.storage.local.set({downloadedInvoices:Array.from(o)}),chrome.runtime.sendMessage({action:"updateCounts",detectedOrders:e.length,downloadedInvoices:o.size})),URL.revokeObjectURL(a),o.size===e.length&&chrome.runtime.sendMessage({action:"updateStatus",text:"All downloads complete!"})})}(r,t)}catch(e){console.error(`Failed to process invoice for order ${t.id}:`,e)}}(t)},n*Math.floor(5e3*Math.random())+2e3)}):chrome.runtime.sendMessage({action:"updateStatus",text:"All invoices are up to date."})}(),!0))})();